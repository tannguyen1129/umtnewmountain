{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 75,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{\n  \"tips\": [\n    \"Pass data to this widget in the default model field\",\n    \"Access data in the javascript file using the appsmith.model variable\",\n    \"Create events in the widget and trigger them in the javascript file using appsmith.triggerEvent('eventName')\",\n    \"Access data in CSS as var(--appsmith-model-{property-name})\"\n  ]\n}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "7ieq78cj8a",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 44,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 23,
  "mobileTopRow": 14,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 75,
  "originalTopRow": 14,
  "parentColumnSpace": 19.8125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flood Map</title>\n    <!-- Load Leaflet CSS -->\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        #map {\n            width: 100%;\n            height: 100vh;\n        }\n        #control-container {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            z-index: 1000;\n            background: white;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n            width: 250px;\n        }\n        #control-container input, #control-container button, #control-container select {\n            margin: 10px 0;\n            width: 100%;\n            padding: 10px;\n            font-size: 14px;\n        }\n        #control-container button {\n            background-color: #2196F3;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        #control-container button:hover {\n            background-color: #1E88E5;\n        }\n    </style>\n</head>\n<body>\n    <!-- Container chứa bản đồ -->\n    <div id=\"map\"></div>\n\n    <!-- Tìm kiếm, Refresh bản đồ và Lấy vị trí -->\n    <div id=\"control-container\">\n        <select id=\"disaster-select\">\n            <option value=\"\">Chọn vùng thiên tai</option>\n        </select>\n        <button id=\"search-disaster-button\">Tìm Kiếm</button>\n        <button id=\"refresh-map-button\">Refresh Bản Đồ</button>\n        <button id=\"get-location-button\">Vị trí của tôi</button>\n    </div>\n\n    <!-- Load Leaflet JS -->\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        // Tạo bản đồ\n        const map = L.map(\"map\").setView([16.5084, 107.2963], 6); // Vị trí mặc định\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            maxZoom: 19,\n        }).addTo(map);\n\n        let userLocationMarker = null; // Biến lưu marker vị trí người dùng\n        let disasterZones = []; // Lưu danh sách vùng thiên tai\n\n        // Proxy URL xử lý CORS\n        const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n        const apiUrl = \"https://api.umtoj.edu.vn/api/zone/disaster-zones/\";\n\n        // Hàm vẽ Quần đảo Hoàng Sa và Trường Sa\n        const drawTerritories = () => {\n            // Tọa độ của Quần đảo Hoàng Sa\n            const hoangSaBounds = [\n                [17.25, 111.0], // Góc Tây Bắc\n                [17.25, 113.0], // Góc Đông Bắc\n                [15.75, 113.0], // Góc Đông Nam\n                [15.75, 111.0]  // Góc Tây Nam\n            ];\n            const hoangSaPolygon = L.polygon(hoangSaBounds, {\n                color: \"blue\",\n                fillColor: \"#30f\",\n                fillOpacity: 0.3,\n            }).addTo(map);\n            hoangSaPolygon.bindPopup(`\n                <b>Quần đảo Hoàng Sa</b><br>\n                <b>Vĩ độ:</b> 15°45' - 17°15' vĩ Bắc<br>\n                <b>Kinh độ:</b> 111° - 113° kinh Đông<br>\n                <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n            `);\n\n            // Tọa độ của Quần đảo Trường Sa\n            const truongSaBounds = [\n                [12.0, 111.5],      // Góc Tây Bắc\n                [12.0, 117.3333],   // Góc Đông Bắc\n                [6.8333, 117.3333], // Góc Đông Nam\n                [6.8333, 111.5]     // Góc Tây Nam\n            ];\n            const truongSaPolygon = L.polygon(truongSaBounds, {\n                color: \"green\",\n                fillColor: \"#3f0\",\n                fillOpacity: 0.3,\n            }).addTo(map);\n            truongSaPolygon.bindPopup(`\n                <b>Quần đảo Trường Sa</b><br>\n                <b>Vĩ độ:</b> 6°50' - 12° vĩ Bắc<br>\n                <b>Kinh độ:</b> 111°30' - 117°20' kinh Đông<br>\n                <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n            `);\n        };\n\n        // Hàm vẽ vùng thiên tai\n        const drawDisasterZones = (zones) => {\n            disasterZones = zones;\n            const disasterSelect = document.getElementById(\"disaster-select\");\n            disasterSelect.innerHTML = `<option value=\"\">Chọn vùng thiên tai</option>`;\n            zones.forEach((zone, index) => {\n                const { latitude, longitude, radius, name_zone, description, disaster_type } = zone;\n                const lat = parseFloat(latitude);\n                const lng = parseFloat(longitude);\n                const rad = parseFloat(radius);\n\n                disasterSelect.innerHTML += `<option value=\"${index}\">${name_zone}</option>`;\n\n                if (!isNaN(lat) && !isNaN(lng) && !isNaN(rad)) {\n                    const circle = L.circle([lat, lng], {\n                        color: \"red\",\n                        fillColor: \"#f03\",\n                        fillOpacity: 0.5,\n                        radius: rad,\n                    }).addTo(map);\n                    circle.bindPopup(`\n                        <b>${name_zone}</b><br>\n                        Loại thiên tai: ${disaster_type || \"Không rõ\"}<br>\n                        Bán kính: ${rad}m<br>\n                        Mô tả: ${description || \"Không có mô tả\"}\n                    `);\n                }\n            });\n        };\n\n        // Hàm cập nhật vùng thiên tai\n        const updateDisasterZones = async () => {\n            try {\n                const response = await fetch(proxyUrl + apiUrl);\n                if (!response.ok) throw new Error(\"Lỗi khi lấy dữ liệu từ API\");\n\n                const data = await response.json();\n\n                // Xóa các layer cũ (chỉ xóa các vùng thiên tai)\n                map.eachLayer((layer) => {\n                    if (layer instanceof L.Circle) {\n                        map.removeLayer(layer);\n                    }\n                });\n\n                drawDisasterZones(data);\n            } catch (error) {\n                console.error(\"Lỗi cập nhật dữ liệu:\", error);\n            }\n        };\n\n        // Gọi vẽ Quần đảo Hoàng Sa và Trường Sa\n        drawTerritories();\n\n        // Gọi cập nhật dữ liệu khi tải trang\n        updateDisasterZones();\n\n        // Xử lý sự kiện tìm kiếm vùng thiên tai\n        document.getElementById(\"search-disaster-button\").addEventListener(\"click\", () => {\n            const disasterSelect = document.getElementById(\"disaster-select\");\n            const selectedIndex = disasterSelect.value;\n\n            if (selectedIndex === \"\") {\n                alert(\"Vui lòng chọn một vùng thiên tai!\");\n                return;\n            }\n\n            const selectedZone = disasterZones[selectedIndex];\n            if (selectedZone) {\n                const { latitude, longitude } = selectedZone;\n                map.setView([latitude, longitude], 12);\n            }\n        });\n\n        // Làm mới bản đồ\n        document.getElementById(\"refresh-map-button\").addEventListener(\"click\", () => {\n            updateDisasterZones();\n            alert(\"Bản đồ đã được làm mới!\");\n        });\n\n        // Xử lý vị trí người dùng\n        document.getElementById(\"get-location-button\").addEventListener(\"click\", () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        const { latitude, longitude } = position.coords;\n\n                        if (userLocationMarker) {\n                            map.removeLayer(userLocationMarker);\n                        }\n\n                        userLocationMarker = L.marker([latitude, longitude])\n                            .addTo(map)\n                            .bindPopup(\"Bạn đang ở đây!\")\n                            .openPopup();\n\n                        map.setView([latitude, longitude], 15);\n                    },\n                    (error) => {\n                        switch (error.code) {\n                            case error.PERMISSION_DENIED:\n                                alert(\"Bạn đã từ chối quyền truy cập vị trí!\");\n                                break;\n                            case error.POSITION_UNAVAILABLE:\n                                alert(\"Thông tin vị trí không khả dụng!\");\n                                break;\n                            case error.TIMEOUT:\n                                alert(\"Yêu cầu lấy vị trí đã hết thời gian!\");\n                                break;\n                            default:\n                                alert(\"Đã xảy ra lỗi không xác định!\");\n                                break;\n                        }\n                    },\n                    {\n                        enableHighAccuracy: true,\n                        timeout: 10000,\n                        maximumAge: 0,\n                    }\n                );\n            } else {\n                alert(\"Trình duyệt của bạn không hỗ trợ định vị!\");\n            }\n        });\n    });\n</script>\n</body>\n</html>",
    "js": ""
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 14,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flood Map</title>\n    <!-- Load Leaflet CSS -->\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        #map {\n            width: 100%;\n            height: 100vh;\n        }\n        #control-container {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            z-index: 1000;\n            background: white;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n            width: 250px;\n        }\n        #control-container input, #control-container button, #control-container select {\n            margin: 10px 0;\n            width: 100%;\n            padding: 10px;\n            font-size: 14px;\n        }\n        #control-container button {\n            background-color: #2196F3;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        #control-container button:hover {\n            background-color: #1E88E5;\n        }\n    </style>\n</head>\n<body>\n    <!-- Container chứa bản đồ -->\n    <div id=\"map\"></div>\n\n    <!-- Tìm kiếm, Refresh bản đồ và Lấy vị trí -->\n    <div id=\"control-container\">\n        <select id=\"disaster-select\">\n            <option value=\"\">Chọn vùng thiên tai</option>\n        </select>\n        <button id=\"search-disaster-button\">Tìm Kiếm</button>\n        <button id=\"refresh-map-button\">Refresh Bản Đồ</button>\n        <button id=\"get-location-button\">Vị trí của tôi</button>\n    </div>\n\n    <!-- Load Leaflet JS -->\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        // Tạo bản đồ\n        const map = L.map(\"map\").setView([16.5084, 107.2963], 6); // Vị trí mặc định\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            maxZoom: 19,\n        }).addTo(map);\n\n        let userLocationMarker = null; // Biến lưu marker vị trí người dùng\n        let disasterZones = []; // Lưu danh sách vùng thiên tai\n\n        // Proxy URL xử lý CORS\n        const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n        const apiUrl = \"https://api.umtoj.edu.vn/api/zone/disaster-zones/\";\n\n        // Hàm vẽ Quần đảo Hoàng Sa và Trường Sa\n        const drawTerritories = () => {\n            // Tọa độ của Quần đảo Hoàng Sa\n            const hoangSaBounds = [\n                [17.25, 111.0], // Góc Tây Bắc\n                [17.25, 113.0], // Góc Đông Bắc\n                [15.75, 113.0], // Góc Đông Nam\n                [15.75, 111.0]  // Góc Tây Nam\n            ];\n            const hoangSaPolygon = L.polygon(hoangSaBounds, {\n                color: \"blue\",\n                fillColor: \"#30f\",\n                fillOpacity: 0.3,\n            }).addTo(map);\n            hoangSaPolygon.bindPopup(`\n                <b>Quần đảo Hoàng Sa</b><br>\n                <b>Vĩ độ:</b> 15°45' - 17°15' vĩ Bắc<br>\n                <b>Kinh độ:</b> 111° - 113° kinh Đông<br>\n                <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n            `);\n\n            // Tọa độ của Quần đảo Trường Sa\n            const truongSaBounds = [\n                [12.0, 111.5],      // Góc Tây Bắc\n                [12.0, 117.3333],   // Góc Đông Bắc\n                [6.8333, 117.3333], // Góc Đông Nam\n                [6.8333, 111.5]     // Góc Tây Nam\n            ];\n            const truongSaPolygon = L.polygon(truongSaBounds, {\n                color: \"green\",\n                fillColor: \"#3f0\",\n                fillOpacity: 0.3,\n            }).addTo(map);\n            truongSaPolygon.bindPopup(`\n                <b>Quần đảo Trường Sa</b><br>\n                <b>Vĩ độ:</b> 6°50' - 12° vĩ Bắc<br>\n                <b>Kinh độ:</b> 111°30' - 117°20' kinh Đông<br>\n                <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n            `);\n        };\n\n        // Hàm vẽ vùng thiên tai\n        const drawDisasterZones = (zones) => {\n            disasterZones = zones;\n            const disasterSelect = document.getElementById(\"disaster-select\");\n            disasterSelect.innerHTML = `<option value=\"\">Chọn vùng thiên tai</option>`;\n            zones.forEach((zone, index) => {\n                const { latitude, longitude, radius, name_zone, description, disaster_type } = zone;\n                const lat = parseFloat(latitude);\n                const lng = parseFloat(longitude);\n                const rad = parseFloat(radius);\n\n                disasterSelect.innerHTML += `<option value=\"${index}\">${name_zone}</option>`;\n\n                if (!isNaN(lat) && !isNaN(lng) && !isNaN(rad)) {\n                    const circle = L.circle([lat, lng], {\n                        color: \"red\",\n                        fillColor: \"#f03\",\n                        fillOpacity: 0.5,\n                        radius: rad,\n                    }).addTo(map);\n                    circle.bindPopup(`\n                        <b>${name_zone}</b><br>\n                        Loại thiên tai: ${disaster_type || \"Không rõ\"}<br>\n                        Bán kính: ${rad}m<br>\n                        Mô tả: ${description || \"Không có mô tả\"}\n                    `);\n                }\n            });\n        };\n\n        // Hàm cập nhật vùng thiên tai\n        const updateDisasterZones = async () => {\n            try {\n                const response = await fetch(proxyUrl + apiUrl);\n                if (!response.ok) throw new Error(\"Lỗi khi lấy dữ liệu từ API\");\n\n                const data = await response.json();\n\n                // Xóa các layer cũ (chỉ xóa các vùng thiên tai)\n                map.eachLayer((layer) => {\n                    if (layer instanceof L.Circle) {\n                        map.removeLayer(layer);\n                    }\n                });\n\n                drawDisasterZones(data);\n            } catch (error) {\n                console.error(\"Lỗi cập nhật dữ liệu:\", error);\n            }\n        };\n\n        // Gọi vẽ Quần đảo Hoàng Sa và Trường Sa\n        drawTerritories();\n\n        // Gọi cập nhật dữ liệu khi tải trang\n        updateDisasterZones();\n\n        // Xử lý sự kiện tìm kiếm vùng thiên tai\n        document.getElementById(\"search-disaster-button\").addEventListener(\"click\", () => {\n            const disasterSelect = document.getElementById(\"disaster-select\");\n            const selectedIndex = disasterSelect.value;\n\n            if (selectedIndex === \"\") {\n                alert(\"Vui lòng chọn một vùng thiên tai!\");\n                return;\n            }\n\n            const selectedZone = disasterZones[selectedIndex];\n            if (selectedZone) {\n                const { latitude, longitude } = selectedZone;\n                map.setView([latitude, longitude], 12);\n            }\n        });\n\n        // Làm mới bản đồ\n        document.getElementById(\"refresh-map-button\").addEventListener(\"click\", () => {\n            updateDisasterZones();\n            alert(\"Bản đồ đã được làm mới!\");\n        });\n\n        // Xử lý vị trí người dùng\n        document.getElementById(\"get-location-button\").addEventListener(\"click\", () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        const { latitude, longitude } = position.coords;\n\n                        if (userLocationMarker) {\n                            map.removeLayer(userLocationMarker);\n                        }\n\n                        userLocationMarker = L.marker([latitude, longitude])\n                            .addTo(map)\n                            .bindPopup(\"Bạn đang ở đây!\")\n                            .openPopup();\n\n                        map.setView([latitude, longitude], 15);\n                    },\n                    (error) => {\n                        switch (error.code) {\n                            case error.PERMISSION_DENIED:\n                                alert(\"Bạn đã từ chối quyền truy cập vị trí!\");\n                                break;\n                            case error.POSITION_UNAVAILABLE:\n                                alert(\"Thông tin vị trí không khả dụng!\");\n                                break;\n                            case error.TIMEOUT:\n                                alert(\"Yêu cầu lấy vị trí đã hết thời gian!\");\n                                break;\n                            default:\n                                alert(\"Đã xảy ra lỗi không xác định!\");\n                                break;\n                        }\n                    },\n                    {\n                        enableHighAccuracy: true,\n                        timeout: 10000,\n                        maximumAge: 0,\n                    }\n                );\n            } else {\n                alert(\"Trình duyệt của bạn không hỗ trợ định vị!\");\n            }\n        });\n    });\n</script>\n</body>\n</html>",
    "js": ""
  },
  "version": 1,
  "widgetId": "kx10x339bh",
  "widgetName": "MapCitizen"
}