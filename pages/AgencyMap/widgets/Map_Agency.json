{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 84,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "0grfj9thpp",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 85,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 23,
  "mobileTopRow": 55,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 84,
  "originalTopRow": 14,
  "parentColumnSpace": 19.8125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "/* File: styles.css */\n#map {\n    width: 100%;\n    height: 500x;\n}\n\n/* Đảm bảo form được căn chỉnh chính xác */\n#form-container {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 1000;\n    background: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);\n    width: 320px;\n    font-family: Arial, sans-serif;\n    box-sizing: border-box; /* Đảm bảo padding không ảnh hưởng đến kích thước */\n}\n\n#form-container h4 {\n    font-size: 20px;\n    font-weight: bold;\n    color: #333;\n    margin-bottom: 15px;\n    text-align: center;\n    border-bottom: 2px solid #4CAF50;\n    padding-bottom: 8px;\n}\n\n#form-container input, \n#form-container textarea, \n#form-container button {\n    display: block;\n    margin: 10px auto; /* Căn giữa các phần tử */\n    width: calc(100% - 20px); /* Căn chỉnh chiều rộng với padding đều 10px */\n    font-size: 16px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    outline: none;\n    box-sizing: border-box;\n    transition: all 0.2s ease-in-out;\n}\n\n#form-container input:focus, \n#form-container textarea:focus {\n    border-color: #4CAF50;\n    box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);\n}\n\n#form-container textarea {\n    resize: none;\n    height: 100px; /* Chiều cao hợp lý cho textarea */\n}\n\n#form-container button {\n    background: #4CAF50;\n    color: white;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    border-radius: 5px;\n    padding: 12px;\n    margin-top: 15px; /* Tạo khoảng cách giữa nút và phần trên */\n    transition: background-color 0.3s ease;\n}\n\n#form-container button:hover {\n    background: #45a049;\n}\n\n#form-container button:active {\n    background: #3e8e41;\n    transform: scale(0.98);\n}\n\n/* Đảm bảo form hiển thị tốt trên màn hình nhỏ */\n@media (max-width: 768px) {\n    #form-container {\n        width: 90%; /* Tự động căn giữa và chiếm 90% chiều rộng */\n        left: 5%; /* Đặt margin đều hai bên */\n        right: auto;\n    }\n\n    #form-container input, \n    #form-container textarea, \n    #form-container button {\n        width: calc(100% - 20px);\n    }\n}\n}",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flood Map</title>\n    <!-- Load Leaflet CSS -->\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        /* Đảm bảo bản đồ hiển thị */\n        #map {\n            width: 100%;\n            height: 100vh;\n        }\n        #form-container {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            z-index: 1000;\n            background: white;\n            padding: 15px;\n            width: 300px;\n            height: 50vh;\n            overflow-y: auto;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        #form-container input, #form-container select, #form-container textarea, #form-container button {\n            margin: 10px 0;\n            width: 100%;\n            padding: 10px;\n            font-size: 14px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Container chứa bản đồ -->\n    <div id=\"map\"></div>\n\n    <!-- Form thêm vùng thiên tai -->\n    <div id=\"form-container\">\n        <h4>Thêm Vùng Thiên Tai</h4>\n        <input type=\"text\" id=\"zone-name\" placeholder=\"Tên vùng thảm họa\" />\n        <input type=\"number\" id=\"latitude\" placeholder=\"Vĩ độ\" />\n        <input type=\"number\" id=\"longitude\" placeholder=\"Kinh độ\" />\n        <input type=\"number\" id=\"radius\" placeholder=\"Bán kính (m)\" />\n        <select id=\"disaster-type\">\n            <option value=\"\">Chọn loại thiên tai</option>\n            <option value=\"Lũ lụt\">Lũ lụt</option>\n            <option value=\"Ngập úng\">Ngập úng</option>\n            <option value=\"Lũ quét\">Lũ quét</option>\n            <option value=\"Bão\">Bão</option>\n            <option value=\"Ngập mặn\">Ngập mặn</option>\n            <option value=\"Sạt lở\">Sạt lở</option>\n        </select>\n        <textarea id=\"description\" placeholder=\"Mô tả chi tiết thiên tai\"></textarea>\n        <button id=\"add-zone-button\">Thêm Vùng</button>\n        <button id=\"refresh-map-button\" style=\"background-color: #2196F3; color: white;\">Refresh Bản Đồ</button>\n        <h4>Tìm Kiếm Theo Địa Chỉ</h4>\n        <input type=\"text\" id=\"search-address\" placeholder=\"Nhập địa chỉ\" />\n        <button id=\"search-button\" style=\"background-color: #4CAF50; color: white;\">Tìm Kiếm</button>\n    </div>\n\n    <!-- Load Leaflet JS -->\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        const map = L.map(\"map\").setView([16.5084, 107.2963], 10); // Vị trí mặc định\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            maxZoom: 19,\n        }).addTo(map);\n\n        const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n        const apiUrl = \"https://api.umtoj.edu.vn/api/zone/disaster-zones/\";\n\n        // Hàm vẽ vùng thiên tai\n        const drawDisasterZones = (zones) => {\n            zones.forEach(zone => {\n                const { latitude, longitude, radius, name_zone, description, disaster_type } = zone;\n                const lat = parseFloat(latitude);\n                const lng = parseFloat(longitude);\n                const rad = parseFloat(radius);\n\n                if (!isNaN(lat) && !isNaN(lng) && !isNaN(rad)) {\n                    const circle = L.circle([lat, lng], {\n                        color: \"red\",\n                        fillColor: \"#f03\",\n                        fillOpacity: 0.5,\n                        radius: rad,\n                    }).addTo(map);\n                    circle.bindPopup(`\n                        <b>${name_zone}</b><br>\n                        Loại thiên tai: ${disaster_type || \"Không rõ\"}<br>\n                        Bán kính: ${rad}m<br>\n                        Mô tả: ${description || \"Không có mô tả\"}`);\n                }\n            });\n        };\n\n        // Thêm các vùng lãnh thổ Quần đảo Hoàng Sa và Trường Sa\n// Tọa độ của Quần đảo Hoàng Sa\nconst hoangSaBounds = [\n    [17.25, 111.0], // Góc Tây Bắc\n    [17.25, 113.0], // Góc Đông Bắc\n    [15.75, 113.0], // Góc Đông Nam\n    [15.75, 111.0]  // Góc Tây Nam\n];\n\n// Vẽ polygon cho Quần đảo Hoàng Sa\nconst hoangSaPolygon = L.polygon(hoangSaBounds, {\n    color: \"blue\", // Màu sắc viền\n    fillColor: \"#30f\", // Màu sắc nền\n    fillOpacity: 0.3 // Độ trong suốt\n}).addTo(map);\n\n// Hiển thị thông tin khi nhấn vào polygon\nhoangSaPolygon.bindPopup(`\n    <b>Quần đảo Hoàng Sa</b><br>\n    <b>Vĩ độ:</b> 15°45' - 17°15' vĩ Bắc<br>\n    <b>Kinh độ:</b> 111° - 113° kinh Đông<br>\n    <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n`);\n\n// Tọa độ của Quần đảo Trường Sa\nconst truongSaBounds = [\n    [12.0, 111.5],      // Góc Tây Bắc\n    [12.0, 117.3333],   // Góc Đông Bắc\n    [6.8333, 117.3333], // Góc Đông Nam\n    [6.8333, 111.5]     // Góc Tây Nam\n];\n\n// Vẽ polygon cho Quần đảo Trường Sa\nconst truongSaPolygon = L.polygon(truongSaBounds, {\n    color: \"green\", // Màu sắc viền\n    fillColor: \"#3f0\", // Màu sắc nền\n    fillOpacity: 0.3 // Độ trong suốt\n}).addTo(map);\n\n// Hiển thị thông tin khi nhấn vào polygon\ntruongSaPolygon.bindPopup(`\n    <b>Quần đảo Trường Sa</b><br>\n    <b>Vĩ độ:</b> 6°50' - 12° vĩ Bắc<br>\n    <b>Kinh độ:</b> 111°30' - 117°20' kinh Đông<br>\n    <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n`);\n\n        // Hàm cập nhật dữ liệu\n        const updateDisasterZones = async () => {\n            try {\n                const response = await fetch(proxyUrl + apiUrl);\n                if (!response.ok) throw new Error(\"Lỗi khi lấy dữ liệu từ API\");\n\n                const data = await response.json();\n                map.eachLayer((layer) => {\n                    if (layer instanceof L.Circle) {\n                        map.removeLayer(layer);\n                    }\n                });\n                drawDisasterZones(data);\n\n                // Vẽ lại các vùng lãnh thổ\n                vietTerritories.forEach(zone => {\n                    const { latitude, longitude, radius, name_zone, description } = zone;\n\n                    const circle = L.circle([latitude, longitude], {\n                        color: \"blue\",\n                        fillColor: \"#30f\",\n                        fillOpacity: 0.3,\n                        radius: radius,\n                    }).addTo(map);\n\n                    circle.bindPopup(`\n                        <b>${name_zone}</b><br>\n                        <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam<br>\n                        <b>Mô tả:</b> ${description}\n                    `);\n                });\n            } catch (error) {\n                console.error(\"Lỗi cập nhật dữ liệu:\", error);\n            }\n        };\n\n        updateDisasterZones();\n\n        // Thêm vùng mới\n        document.getElementById(\"add-zone-button\").addEventListener(\"click\", async () => {\n            const name = document.getElementById(\"zone-name\").value.trim();\n            const latitude = document.getElementById(\"latitude\").value.trim();\n            const longitude = document.getElementById(\"longitude\").value.trim();\n            const radius = document.getElementById(\"radius\").value.trim();\n            const disasterType = document.getElementById(\"disaster-type\").value;\n            const description = document.getElementById(\"description\").value.trim();\n\n            if (!name || !latitude || !longitude || !radius || !disasterType) {\n                alert(\"Vui lòng nhập đầy đủ thông tin!\");\n                return;\n            }\n\n            const newZone = { name_zone: name, latitude, longitude, radius, disaster_type: disasterType, description };\n            try {\n                const response = await fetch(proxyUrl + apiUrl, {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(newZone),\n                });\n                if (!response.ok) throw new Error(\"Lỗi khi thêm vùng thiên tai!\");\n\n                alert(\"Thêm vùng thành công!\");\n                updateDisasterZones();\n            } catch (error) {\n                console.error(\"Lỗi thêm vùng:\", error);\n                alert(\"Có lỗi xảy ra, vui lòng thử lại!\");\n            }\n        });\n\n        // Làm mới bản đồ\n        document.getElementById(\"refresh-map-button\").addEventListener(\"click\", () => {\n            updateDisasterZones();\n            alert(\"Bản đồ đã được làm mới!\");\n        });\n\n        // Tìm kiếm địa chỉ\n        const searchAddress = async (address) => {\n            try {\n                const searchUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`;\n                const response = await fetch(searchUrl);\n                if (!response.ok) throw new Error(\"Không thể tìm kiếm địa chỉ.\");\n\n                const results = await response.json();\n                if (results.length === 0) {\n                    alert(\"Không tìm thấy địa chỉ. Vui lòng kiểm tra lại.\");\n                    return;\n                }\n\n                const { lat, lon, display_name } = results[0];\n                const latitude = parseFloat(lat);\n                const longitude = parseFloat(lon);\n\n                map.setView([latitude, longitude], 13);\n\n                const marker = L.marker([latitude, longitude]).addTo(map);\n                marker.bindPopup(`\n                    <b>Địa chỉ:</b> ${display_name}<br>\n                    <b>Vĩ độ:</b> ${latitude}<br>\n                    <b>Kinh độ:</b> ${longitude}<br>\n                    <button id=\"copy-coordinates-button\" onclick=\"copyCoordinates(${latitude}, ${longitude})\">\n                        Sao chép tọa độ để tạo vùng thiên tai\n                    </button>`).openPopup();\n            } catch (error) {\n                console.error(\"Lỗi khi tìm kiếm địa chỉ:\", error);\n                alert(\"Có lỗi xảy ra trong quá trình tìm kiếm. Vui lòng thử lại.\");\n            }\n        };\n\n        const copyCoordinates = (latitude, longitude) => {\n            document.getElementById(\"latitude\").value = latitude;\n            document.getElementById(\"longitude\").value = longitude;\n            alert(`Tọa độ đã được sao chép:\\nVĩ độ: ${latitude}\\nKinh độ: ${longitude}`);\n        };\n\n        document.getElementById(\"search-button\").addEventListener(\"click\", () => {\n            const address = document.getElementById(\"search-address\").value.trim();\n            if (!address) {\n                alert(\"Vui lòng nhập địa chỉ!\");\n                return;\n            }\n            searchAddress(address);\n        });\n    });\n</script>\n</body>\n</html>",
    "js": ""
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 14,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* File: styles.css */\n#map {\n    width: 100%;\n    height: 500x;\n}\n\n/* Đảm bảo form được căn chỉnh chính xác */\n#form-container {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 1000;\n    background: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);\n    width: 320px;\n    font-family: Arial, sans-serif;\n    box-sizing: border-box; /* Đảm bảo padding không ảnh hưởng đến kích thước */\n}\n\n#form-container h4 {\n    font-size: 20px;\n    font-weight: bold;\n    color: #333;\n    margin-bottom: 15px;\n    text-align: center;\n    border-bottom: 2px solid #4CAF50;\n    padding-bottom: 8px;\n}\n\n#form-container input, \n#form-container textarea, \n#form-container button {\n    display: block;\n    margin: 10px auto; /* Căn giữa các phần tử */\n    width: calc(100% - 20px); /* Căn chỉnh chiều rộng với padding đều 10px */\n    font-size: 16px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    outline: none;\n    box-sizing: border-box;\n    transition: all 0.2s ease-in-out;\n}\n\n#form-container input:focus, \n#form-container textarea:focus {\n    border-color: #4CAF50;\n    box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);\n}\n\n#form-container textarea {\n    resize: none;\n    height: 100px; /* Chiều cao hợp lý cho textarea */\n}\n\n#form-container button {\n    background: #4CAF50;\n    color: white;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    border-radius: 5px;\n    padding: 12px;\n    margin-top: 15px; /* Tạo khoảng cách giữa nút và phần trên */\n    transition: background-color 0.3s ease;\n}\n\n#form-container button:hover {\n    background: #45a049;\n}\n\n#form-container button:active {\n    background: #3e8e41;\n    transform: scale(0.98);\n}\n\n/* Đảm bảo form hiển thị tốt trên màn hình nhỏ */\n@media (max-width: 768px) {\n    #form-container {\n        width: 90%; /* Tự động căn giữa và chiếm 90% chiều rộng */\n        left: 5%; /* Đặt margin đều hai bên */\n        right: auto;\n    }\n\n    #form-container input, \n    #form-container textarea, \n    #form-container button {\n        width: calc(100% - 20px);\n    }\n}\n}",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flood Map</title>\n    <!-- Load Leaflet CSS -->\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        /* Đảm bảo bản đồ hiển thị */\n        #map {\n            width: 100%;\n            height: 100vh;\n        }\n        #form-container {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            z-index: 1000;\n            background: white;\n            padding: 15px;\n            width: 300px;\n            height: 50vh;\n            overflow-y: auto;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        #form-container input, #form-container select, #form-container textarea, #form-container button {\n            margin: 10px 0;\n            width: 100%;\n            padding: 10px;\n            font-size: 14px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Container chứa bản đồ -->\n    <div id=\"map\"></div>\n\n    <!-- Form thêm vùng thiên tai -->\n    <div id=\"form-container\">\n        <h4>Thêm Vùng Thiên Tai</h4>\n        <input type=\"text\" id=\"zone-name\" placeholder=\"Tên vùng thảm họa\" />\n        <input type=\"number\" id=\"latitude\" placeholder=\"Vĩ độ\" />\n        <input type=\"number\" id=\"longitude\" placeholder=\"Kinh độ\" />\n        <input type=\"number\" id=\"radius\" placeholder=\"Bán kính (m)\" />\n        <select id=\"disaster-type\">\n            <option value=\"\">Chọn loại thiên tai</option>\n            <option value=\"Lũ lụt\">Lũ lụt</option>\n            <option value=\"Ngập úng\">Ngập úng</option>\n            <option value=\"Lũ quét\">Lũ quét</option>\n            <option value=\"Bão\">Bão</option>\n            <option value=\"Ngập mặn\">Ngập mặn</option>\n            <option value=\"Sạt lở\">Sạt lở</option>\n        </select>\n        <textarea id=\"description\" placeholder=\"Mô tả chi tiết thiên tai\"></textarea>\n        <button id=\"add-zone-button\">Thêm Vùng</button>\n        <button id=\"refresh-map-button\" style=\"background-color: #2196F3; color: white;\">Refresh Bản Đồ</button>\n        <h4>Tìm Kiếm Theo Địa Chỉ</h4>\n        <input type=\"text\" id=\"search-address\" placeholder=\"Nhập địa chỉ\" />\n        <button id=\"search-button\" style=\"background-color: #4CAF50; color: white;\">Tìm Kiếm</button>\n    </div>\n\n    <!-- Load Leaflet JS -->\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        const map = L.map(\"map\").setView([16.5084, 107.2963], 10); // Vị trí mặc định\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            maxZoom: 19,\n        }).addTo(map);\n\n        const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n        const apiUrl = \"https://api.umtoj.edu.vn/api/zone/disaster-zones/\";\n\n        // Hàm vẽ vùng thiên tai\n        const drawDisasterZones = (zones) => {\n            zones.forEach(zone => {\n                const { latitude, longitude, radius, name_zone, description, disaster_type } = zone;\n                const lat = parseFloat(latitude);\n                const lng = parseFloat(longitude);\n                const rad = parseFloat(radius);\n\n                if (!isNaN(lat) && !isNaN(lng) && !isNaN(rad)) {\n                    const circle = L.circle([lat, lng], {\n                        color: \"red\",\n                        fillColor: \"#f03\",\n                        fillOpacity: 0.5,\n                        radius: rad,\n                    }).addTo(map);\n                    circle.bindPopup(`\n                        <b>${name_zone}</b><br>\n                        Loại thiên tai: ${disaster_type || \"Không rõ\"}<br>\n                        Bán kính: ${rad}m<br>\n                        Mô tả: ${description || \"Không có mô tả\"}`);\n                }\n            });\n        };\n\n        // Thêm các vùng lãnh thổ Quần đảo Hoàng Sa và Trường Sa\n// Tọa độ của Quần đảo Hoàng Sa\nconst hoangSaBounds = [\n    [17.25, 111.0], // Góc Tây Bắc\n    [17.25, 113.0], // Góc Đông Bắc\n    [15.75, 113.0], // Góc Đông Nam\n    [15.75, 111.0]  // Góc Tây Nam\n];\n\n// Vẽ polygon cho Quần đảo Hoàng Sa\nconst hoangSaPolygon = L.polygon(hoangSaBounds, {\n    color: \"blue\", // Màu sắc viền\n    fillColor: \"#30f\", // Màu sắc nền\n    fillOpacity: 0.3 // Độ trong suốt\n}).addTo(map);\n\n// Hiển thị thông tin khi nhấn vào polygon\nhoangSaPolygon.bindPopup(`\n    <b>Quần đảo Hoàng Sa</b><br>\n    <b>Vĩ độ:</b> 15°45' - 17°15' vĩ Bắc<br>\n    <b>Kinh độ:</b> 111° - 113° kinh Đông<br>\n    <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n`);\n\n// Tọa độ của Quần đảo Trường Sa\nconst truongSaBounds = [\n    [12.0, 111.5],      // Góc Tây Bắc\n    [12.0, 117.3333],   // Góc Đông Bắc\n    [6.8333, 117.3333], // Góc Đông Nam\n    [6.8333, 111.5]     // Góc Tây Nam\n];\n\n// Vẽ polygon cho Quần đảo Trường Sa\nconst truongSaPolygon = L.polygon(truongSaBounds, {\n    color: \"green\", // Màu sắc viền\n    fillColor: \"#3f0\", // Màu sắc nền\n    fillOpacity: 0.3 // Độ trong suốt\n}).addTo(map);\n\n// Hiển thị thông tin khi nhấn vào polygon\ntruongSaPolygon.bindPopup(`\n    <b>Quần đảo Trường Sa</b><br>\n    <b>Vĩ độ:</b> 6°50' - 12° vĩ Bắc<br>\n    <b>Kinh độ:</b> 111°30' - 117°20' kinh Đông<br>\n    <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam\n`);\n\n        // Hàm cập nhật dữ liệu\n        const updateDisasterZones = async () => {\n            try {\n                const response = await fetch(proxyUrl + apiUrl);\n                if (!response.ok) throw new Error(\"Lỗi khi lấy dữ liệu từ API\");\n\n                const data = await response.json();\n                map.eachLayer((layer) => {\n                    if (layer instanceof L.Circle) {\n                        map.removeLayer(layer);\n                    }\n                });\n                drawDisasterZones(data);\n\n                // Vẽ lại các vùng lãnh thổ\n                vietTerritories.forEach(zone => {\n                    const { latitude, longitude, radius, name_zone, description } = zone;\n\n                    const circle = L.circle([latitude, longitude], {\n                        color: \"blue\",\n                        fillColor: \"#30f\",\n                        fillOpacity: 0.3,\n                        radius: radius,\n                    }).addTo(map);\n\n                    circle.bindPopup(`\n                        <b>${name_zone}</b><br>\n                        <b>Chủ quyền:</b> Cộng Hòa Xã Hội Chủ Nghĩa Việt Nam<br>\n                        <b>Mô tả:</b> ${description}\n                    `);\n                });\n            } catch (error) {\n                console.error(\"Lỗi cập nhật dữ liệu:\", error);\n            }\n        };\n\n        updateDisasterZones();\n\n        // Thêm vùng mới\n        document.getElementById(\"add-zone-button\").addEventListener(\"click\", async () => {\n            const name = document.getElementById(\"zone-name\").value.trim();\n            const latitude = document.getElementById(\"latitude\").value.trim();\n            const longitude = document.getElementById(\"longitude\").value.trim();\n            const radius = document.getElementById(\"radius\").value.trim();\n            const disasterType = document.getElementById(\"disaster-type\").value;\n            const description = document.getElementById(\"description\").value.trim();\n\n            if (!name || !latitude || !longitude || !radius || !disasterType) {\n                alert(\"Vui lòng nhập đầy đủ thông tin!\");\n                return;\n            }\n\n            const newZone = { name_zone: name, latitude, longitude, radius, disaster_type: disasterType, description };\n            try {\n                const response = await fetch(proxyUrl + apiUrl, {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(newZone),\n                });\n                if (!response.ok) throw new Error(\"Lỗi khi thêm vùng thiên tai!\");\n\n                alert(\"Thêm vùng thành công!\");\n                updateDisasterZones();\n            } catch (error) {\n                console.error(\"Lỗi thêm vùng:\", error);\n                alert(\"Có lỗi xảy ra, vui lòng thử lại!\");\n            }\n        });\n\n        // Làm mới bản đồ\n        document.getElementById(\"refresh-map-button\").addEventListener(\"click\", () => {\n            updateDisasterZones();\n            alert(\"Bản đồ đã được làm mới!\");\n        });\n\n        // Tìm kiếm địa chỉ\n        const searchAddress = async (address) => {\n            try {\n                const searchUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`;\n                const response = await fetch(searchUrl);\n                if (!response.ok) throw new Error(\"Không thể tìm kiếm địa chỉ.\");\n\n                const results = await response.json();\n                if (results.length === 0) {\n                    alert(\"Không tìm thấy địa chỉ. Vui lòng kiểm tra lại.\");\n                    return;\n                }\n\n                const { lat, lon, display_name } = results[0];\n                const latitude = parseFloat(lat);\n                const longitude = parseFloat(lon);\n\n                map.setView([latitude, longitude], 13);\n\n                const marker = L.marker([latitude, longitude]).addTo(map);\n                marker.bindPopup(`\n                    <b>Địa chỉ:</b> ${display_name}<br>\n                    <b>Vĩ độ:</b> ${latitude}<br>\n                    <b>Kinh độ:</b> ${longitude}<br>\n                    <button id=\"copy-coordinates-button\" onclick=\"copyCoordinates(${latitude}, ${longitude})\">\n                        Sao chép tọa độ để tạo vùng thiên tai\n                    </button>`).openPopup();\n            } catch (error) {\n                console.error(\"Lỗi khi tìm kiếm địa chỉ:\", error);\n                alert(\"Có lỗi xảy ra trong quá trình tìm kiếm. Vui lòng thử lại.\");\n            }\n        };\n\n        const copyCoordinates = (latitude, longitude) => {\n            document.getElementById(\"latitude\").value = latitude;\n            document.getElementById(\"longitude\").value = longitude;\n            alert(`Tọa độ đã được sao chép:\\nVĩ độ: ${latitude}\\nKinh độ: ${longitude}`);\n        };\n\n        document.getElementById(\"search-button\").addEventListener(\"click\", () => {\n            const address = document.getElementById(\"search-address\").value.trim();\n            if (!address) {\n                alert(\"Vui lòng nhập địa chỉ!\");\n                return;\n            }\n            searchAddress(address);\n        });\n    });\n</script>\n</body>\n</html>",
    "js": ""
  },
  "version": 1,
  "widgetId": "lqt9oacfpu",
  "widgetName": "Map_Agency"
}